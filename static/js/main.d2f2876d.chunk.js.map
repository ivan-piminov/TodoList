{"version":3,"sources":["serviceWorker.js","AddNewItemForm.tsx","api.tsx","reducer.ts","common/EditableSpan.tsx","TodoLisTitle.tsx","TodoListHeader.tsx","TodoListTask.tsx","TodoListTasks.tsx","TodoListFooter.tsx","ToDoList.tsx","App.tsx","store.ts","index.js"],"names":["Boolean","window","location","hostname","match","AddNewItemForm","state","error","title","onKeyPress","e","key","_this","onAddItemButtonClick","onTitleChanged","setState","currentTarget","value","newTitle","props","addItem","render","inputClassName","react_default","a","createElement","className","type","placeholder","onChange","onClick","React","Component","instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","tololistId","get","concat","taskTitle","post","task","delta","data","Object","objectSpread2","put","id","delete","todolistId","taskId","initialState","todolists","loading","reducer","arguments","length","undefined","action","map","tl","tasks","newtodoList","toConsumableArray","newTask","find","t","filter","isActive","actions","newPropsObj","EditableSpan","_React$Component","inherits","_super","createSuper","classCallCheck","this","_len","args","Array","_key","call","apply","editMode","activateEdit","deActivateEdit","Fragment","defaultValue","autoFocus","onBlur","TodoLisTitle","deleteTodoList","deleteTodolist","changeTitle","changeTodolistTitle","EditableSpan_EditableSpan","ConnectedTodoLisTitle","connect","_ref2","asyncToGenerator","regenerator_default","mark","_callee2","dispatch","wrap","_context2","prev","next","sent","stop","_x2","_ref8","_callee8","_context8","_x8","TodoListHeader","src_TodoLisTitle","src_AddNewItemForm","addTask","TodoListTask","updateTaskTitle","onIsDoneChanged","changeStatus","checked","deleteTask","isDone","status","taskIsDone","priority","TodoListTasks","tasksElements","src_TodoListTask","ConnectedTodoListTasks","_ref5","_callee5","_context5","_x5","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","ClassForALL","filterValue","ClassForCompleted","ClassForActive","ToDoList","newFilterValue","changeTask","src_TodoListHeader","todolist","src_TodoListTasks","src_TodoListFooter","loadTasks","App","addToDoList","addTodolist","src_ToDoList","loadTodoLists","ConnectedApp","_ref6","_callee6","res","_context6","item","_x6","_ref7","_callee7","_context7","_x7","_ref","_callee","_context","_x","_ref3","_callee3","_context3","items","_x3","_ref4","_callee4","_context4","_x4","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","react_router_dom","basename","process","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2f2876d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. ToDoList is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\n\r\ntype StateType = {\r\n    error: boolean\r\n    title: string\r\n}\r\ntype OwnPropsType = {\r\n    addItem: (newTitle: string) => void\r\n}\r\n\r\nclass AddNewItemForm extends React.Component<OwnPropsType,StateType> {\r\n\r\n    state:StateType = {\r\n        error: false,\r\n        title: \"\"\r\n    };\r\n\r\n    onKeyPress = (e:KeyboardEvent<HTMLInputElement>):void => {\r\n        if (e.key === \"Enter\") {\r\n            this.onAddItemButtonClick()\r\n        }\r\n    };\r\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>):void => {\r\n        this.setState({title: e.currentTarget.value})\r\n    };\r\n\r\n    onAddItemButtonClick = ():void => {\r\n        let newTitle = this.state.title;\r\n        if (newTitle !== \"\") {\r\n            this.props.addItem(newTitle);\r\n            this.setState({error: false, title: \"\"});\r\n        } else {\r\n            this.setState({error: true})\r\n        }\r\n    };\r\n\r\n    render = () => {\r\n        const inputClassName = this.state.error ? \"error\" : \"\";\r\n        return (\r\n            <div className=\"newItemForm\">\r\n                <input type=\"text\" placeholder=\"New item name\"\r\n                       className={inputClassName}\r\n                       onKeyPress={this.onKeyPress}\r\n                       value={this.state.title}\r\n                       onChange={this.onTitleChanged}\r\n                />\r\n                <button onClick={this.onAddItemButtonClick}>Add</button>\r\n            </div>\r\n        );\r\n    };\r\n}\r\nexport default AddNewItemForm;","import axios from \"axios\";\r\nimport {TaskType, TodoType, UpadateTaskType} from \"./types/entities\";\r\n\r\nconst baseURL = `https://social-network.samuraijs.com/api/1.1/`;\r\nconst instance = axios.create({\r\n    baseURL: baseURL,\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"81fab503-698d-43e8-af57-37f0fdd7ac88\"}\r\n});\r\n\r\ntype CommonApiType<T> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\n\r\ntype LoadTasksType = {\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n    error: string\r\n}\r\n\r\ntype UpdateTodolistTitleType = {\r\n    resultCode: number\r\n    data: {}\r\n    messages: []\r\n}\r\n\r\nexport const api = {\r\n    loadTasks(tololistId: string) {\r\n        return instance.get<LoadTasksType>(`todo-lists/${tololistId}/tasks`)\r\n    },\r\n    loadtodoLists() {\r\n        return instance.get<Array<TodoType>>(`todo-lists`)\r\n    },\r\n    addTask(tololistId: string, taskTitle: string) {\r\n        return instance.post<CommonApiType<{ item: TaskType }>>(`todo-lists/${tololistId}/tasks`,\r\n            {title: taskTitle})\r\n    },\r\n    updateTask(tololistId: string, task: TaskType, delta: UpadateTaskType) {\r\n        let data = {\r\n            ...task,\r\n            ...delta\r\n        };\r\n        return instance.put<CommonApiType<{ item: TaskType }>>(`todo-lists/${tololistId}/tasks/${task.id}`, data)\r\n    },\r\n    deletetodoList(tololistId: string) {\r\n        return instance.delete<CommonApiType<{}>>(`todo-lists/` + tololistId)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonApiType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n\r\n    addtodoList(title: string) {\r\n        return instance.post<CommonApiType<{ item: TodoType }>>(`todo-lists`,\r\n            {title})\r\n    },\r\n    updateTodolistTitle(title: string, id: string) {\r\n        return instance.put<UpdateTodolistTitleType>(`todo-lists/${id}`,\r\n            {title})\r\n    }\r\n};","import {api} from \"./api\";\r\nimport {TaskType, TodoType, UpadateTaskType} from \"./types/entities\";\r\nimport {Dispatch} from \"redux\";\r\nimport {InferActionTypes} from \"./store\";\r\n\r\n\r\ntype InitialStateType = {\r\n    todolists: Array<TodoType>\r\n    loading: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    todolists: [],\r\n    loading: false\r\n};\r\n\r\nconst reducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_TASKS\":\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todolistId) return tl;\r\n                    else return {\r\n                        ...tl,\r\n                        tasks: action.tasks\r\n                    }\r\n                })\r\n            };\r\n        case \"SET_TODOLISTS\":\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(tl => ({\r\n                    ...tl,\r\n                    loading: true,\r\n                    tasks: []\r\n                }))\r\n            };\r\n\r\n        case \"ADD_TODOLIST\":\r\n            return {\r\n                ...state,\r\n                todolists: [{\r\n                    ...action.newtodoList,\r\n                    tasks: []\r\n                },\r\n                    ...state.todolists]\r\n            };\r\n        case \"ADD_TASK\":\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (action.todolistId === tl.id) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: [action.newTask, ...tl.tasks]\r\n                        }\r\n                    } else return tl\r\n                })\r\n            };\r\n        case \"CHANGE_TASK\":\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    let task = tl.tasks.find(t => t.id == action.taskId);\r\n                    if (task == null) return tl;\r\n                    else return {\r\n                        ...tl,\r\n                        tasks: tl.tasks.map(t => {\r\n                                if (t.id != action.taskId) return t;\r\n                                else return {\r\n                                    ...t,\r\n                                    ...action.delta\r\n                                }\r\n                            }\r\n                        )\r\n                    }\r\n                })\r\n            };\r\n        case \"DELETE_TODOLIST\":\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id != action.todolistId)\r\n            };\r\n        case \"DELETE_TASK\":\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id != action.todolistId) return tl;\r\n                    else return {\r\n                        ...tl,\r\n                        tasks: tl.tasks.filter(t => t.id != action.taskId)\r\n                    }\r\n                })\r\n            };\r\n        case \"UPDATE_TODOLIST_TITLE\":\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                        if (tl.id != action.todolistId) {\r\n                            return tl\r\n                        } else return {\r\n                            ...tl, title: action.title\r\n                        }\r\n                    }\r\n                )\r\n            };\r\n        case \"LOADING_TASKS\":\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                        if (tl.id != action.todolistId) {\r\n                            return tl\r\n                        } else return {\r\n                            ...tl, loading: action.isActive\r\n                        }\r\n                    }\r\n                )\r\n            };\r\n        case \"LOADING_TODOLISTS\":\r\n            return {\r\n                ...state,\r\n                loading: action.isActive\r\n            }\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default reducer;\r\n\r\n\r\n//Action creators\r\n\r\ntype ActionTypes = InferActionTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    addTodolistAC: (newtodoList: TodoType) => ({type: 'ADD_TODOLIST', newtodoList} as const),\r\n\r\n    addTaskAC: (todolistId: string, newTask: TaskType) => ({type: 'ADD_TASK', todolistId, newTask} as const),\r\n\r\n    changeTaskAC: (todolistId: string, taskId: string, newPropsObj: UpadateTaskType) => ({\r\n        type: 'CHANGE_TASK',\r\n        taskId: taskId,\r\n        delta: newPropsObj\r\n    } as const),\r\n\r\n    deleteTodolistAC: (todolistId: string) => ({type: 'DELETE_TODOLIST', todolistId} as const),\r\n\r\n    deleteTaskAC: (todolistId: string, taskId: string) => ({type: 'DELETE_TASK', taskId, todolistId} as const),\r\n\r\n    setTodolistsAC: (todolists: Array<TodoType>) => ({type: 'SET_TODOLISTS', todolists} as const),\r\n\r\n    setTasksAC: (tasks: Array<TaskType>, todolistId: string) => ({type: 'SET_TASKS', tasks, todolistId} as const),\r\n\r\n    changeTodolistTitleAC: (title: string, todolistId: string) => ({\r\n        type: 'UPDATE_TODOLIST_TITLE',\r\n        title,\r\n        todolistId\r\n    } as const),\r\n\r\n    loadingTodolistAC: (isActive: boolean) => ({type: 'LOADING_TODOLISTS', isActive} as const),\r\n\r\n    loadingTasksAC: (isActive: boolean, todolistId: string) => ({type: 'LOADING_TASKS', isActive, todolistId} as const)\r\n};\r\n\r\n\r\n//Thunk creators\r\nexport const loadTodoLists = () => {\r\n    return async (dispatch: Dispatch<ActionTypes>) => {\r\n       dispatch(actions.loadingTodolistAC(true));\r\n        let res = await  api.loadtodoLists();\r\n                const action = actions.setTodolistsAC(res.data);\r\n                dispatch(action);\r\n                dispatch(actions.loadingTodolistAC(false));\r\n    };\r\n};\r\n\r\nexport const deleteTodolist = (todolistId: string) => {\r\n    return async (dispatch: Dispatch<ActionTypes>) => {\r\n        let res = await api.deletetodoList(todolistId);\r\n                dispatch(actions.deleteTodolistAC(todolistId))\r\n    };\r\n};\r\n\r\nexport const loadTasks = (todolistId: string) => {\r\n    return async (dispatch: Dispatch<ActionTypes>) => {\r\n        dispatch(actions.loadingTasksAC(true, todolistId));\r\n        let res = await  api.loadTasks(todolistId);\r\n                dispatch(actions.setTasksAC(res.data.items, todolistId));\r\n                dispatch(actions.loadingTasksAC(false, todolistId))\r\n    }\r\n};\r\n\r\nexport const addTodolist = (title: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        let res = await api.addtodoList(title);\r\n                dispatch(actions.addTodolistAC(res.data.data.item));\r\n    }\r\n};\r\n\r\nexport const deleteTask = (todolistId: string, taskId: string) => {\r\n    return async (dispatch: Dispatch<ActionTypes>) => {\r\n        let res = await api.deleteTask(todolistId, taskId);\r\n                dispatch(actions.deleteTaskAC(todolistId, taskId))\r\n    }\r\n};\r\n\r\nexport const addTask = (todolistId: string, title: string) => {\r\n    return async (dispatch: Dispatch<ActionTypes>) => {\r\n        let res = await api.addTask(todolistId, title);\r\n                dispatch(actions.addTaskAC(todolistId, res.data.data.item));\r\n    }\r\n};\r\n\r\nexport const changeTask = (todolistId: string, taskId: string, task: TaskType, newPropsObj: UpadateTaskType) => {\r\n    return async (dispatch: Dispatch<ActionTypes>) => {\r\n        let res = await  api.updateTask(todolistId, task, newPropsObj);\r\n                dispatch(actions.changeTaskAC(todolistId, taskId, newPropsObj))\r\n    }\r\n};\r\n\r\nexport const changeTodolistTitle = (title: string, todolistId: string) => {\r\n    return async (dispatch: Dispatch<ActionTypes>) => {\r\n        let res = await  api.updateTodolistTitle(title, todolistId);\r\n                dispatch(actions.changeTodolistTitleAC(title, todolistId))\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\n\r\ntype StateType = {\r\n    editMode: boolean\r\n}\r\ntype OwnPropsType = {\r\n    value: string\r\n    onChange: (value: string) => void\r\n}\r\n\r\nexport class EditableSpan extends React.Component<OwnPropsType, StateType> {\r\n    state: StateType = {\r\n        editMode: false\r\n    };\r\n    activateEdit = (): void => {\r\n        this.setState({editMode: true})\r\n    };\r\n    deActivateEdit = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.props.onChange(e.currentTarget.value);\r\n        this.setState({editMode: false})\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n                {this.state.editMode\r\n                    ? <input defaultValue={this.props.value}\r\n                             autoFocus={true}\r\n                             onBlur={this.deActivateEdit}\r\n                    />\r\n                    : <span onClick={this.activateEdit}> {this.props.value}</span>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {connect} from \"react-redux\";\r\nimport {changeTodolistTitle, deleteTodolist} from \"./reducer\";\r\nimport {EditableSpan} from \"./common/EditableSpan\";\r\nimport {AppStateType} from \"./store\";\r\n\r\ntype OwnPropsType = {\r\n    id: string\r\n    title: string\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    deleteTodolist: (id: string) => void;\r\n    changeTodolistTitle: (title: string, id: string) => void;\r\n}\r\n\r\nclass TodoLisTitle extends React.Component<OwnPropsType & MapDispatchPropsType> {\r\n\r\n    deleteTodoList = (): void => {\r\n        this.props.deleteTodolist(this.props.id);\r\n    };\r\n    changeTitle = (title: string): void => {\r\n        this.props.changeTodolistTitle(title, this.props.id);\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n                <EditableSpan value={this.props.title} onChange={this.changeTitle}/>\r\n                <button onClick={this.deleteTodoList}>X</button>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst ConnectedTodoLisTitle = connect<{}, MapDispatchPropsType, OwnPropsType, AppStateType>(null, {\r\n    deleteTodolist,\r\n    changeTodolistTitle\r\n})(TodoLisTitle);\r\nexport default ConnectedTodoLisTitle;\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport TodoLisTitle from \"./TodoLisTitle\";\r\n\r\ntype OwnPropsType = {\r\n    id: string\r\n    title: string\r\n    addTask: (taskTitle: string) => void\r\n}\r\n\r\nclass TodoListHeader extends React.Component<OwnPropsType> {\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <div className=\"\">\r\n                <div className=\"todoList-header\">\r\n                    <TodoLisTitle id={this.props.id} title={this.props.title}/>\r\n                    <AddNewItemForm addItem={this.props.addTask}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListHeader;\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport './App.css';\r\nimport {EditableSpan} from \"./common/EditableSpan\";\r\nimport {TaskType, UpadateTaskType} from \"./types/entities\";\r\n\r\ntype OwnPropsType = {\r\n    changeTitle: (task: TaskType, taskId: string, newTitle: string) => void\r\n    task: TaskType\r\n    changeStatus: (task: TaskType, taskId: string, isDone: boolean) => void\r\n    deleteTask: (todolistId: string, taskId: string) => void\r\n    todolistId: string\r\n}\r\n\r\nclass TodoListTask extends React.Component <OwnPropsType> {\r\n\r\n    updateTaskTitle = (value: string): void => {\r\n        this.props.changeTitle(this.props.task, this.props.task.id, value);\r\n    };\r\n\r\n    onIsDoneChanged = (e: ChangeEvent<HTMLInputElement>): void => {\r\n        this.props.changeStatus(this.props.task, this.props.task.id, e.currentTarget.checked);\r\n    };\r\n\r\n    deleteTask = (todolistId: string, taskId: string) => {\r\n        this.props.deleteTask(todolistId, taskId);\r\n    };\r\n\r\n    render = () => {\r\n        let isDone = this.props.task.status === 2;\r\n        let taskIsDone = isDone\r\n            ? \"todoList-task done\"\r\n            : \"todoList-task\";\r\n        return (\r\n            <div className=\"todoList-tasks\">\r\n                <div className={taskIsDone}>\r\n                    <input type=\"checkbox\" checked={isDone}\r\n                           onChange={this.onIsDoneChanged}\r\n                    />\r\n                    <EditableSpan value={this.props.task.title} onChange={this.updateTaskTitle}/>\r\n                    <span> priority {this.props.task.priority}\r\n                        <button onClick={() => {\r\n                            this.deleteTask(this.props.todolistId, this.props.task.id)\r\n                        }}>X</button></span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTask;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoListTask from './TodoListTask'\r\nimport {deleteTask} from \"./reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {TaskType, UpadateTaskType} from \"./types/entities\";\r\nimport {AppStateType} from \"./store\";\r\n\r\ntype OwnPropsType = {\r\n    tasks: Array<TaskType>\r\n    changeStatus: (task: TaskType, taskId: string, isDone: boolean) => void\r\n    changeTitle: (task: TaskType, taskId: string, newTitle: string) => void\r\n    todolistId: string\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    deleteTask: (todolistId: string, taskId: string) => void\r\n}\r\n\r\nclass TodoListTasks extends React.Component <OwnPropsType & MapDispatchPropsType> {\r\n\r\n    render = () => {\r\n\r\n        let tasksElements = this.props.tasks.map(task => {\r\n            return <TodoListTask\r\n                changeStatus={this.props.changeStatus}\r\n                changeTitle={this.props.changeTitle}\r\n                deleteTask={this.props.deleteTask}\r\n                todolistId={this.props.todolistId}\r\n                task={task}/>\r\n        });\r\n\r\n        return (\r\n            <div className=\"\">\r\n                {tasksElements}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst ConnectedTodoListTasks = connect<{}, MapDispatchPropsType, OwnPropsType, AppStateType>(null, {deleteTask})(TodoListTasks);\r\nexport default ConnectedTodoListTasks;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\ntype StateType = {\r\n    isHidden:boolean\r\n}\r\n\r\ntype OwnPropsType = {\r\n    changeFilter:(filterValue:string)=>void\r\n    filterValue:string\r\n}\r\n\r\n\r\nclass TodoListFooter extends React.Component<OwnPropsType,StateType> {\r\n    state = {\r\n        isHidden: false\r\n    };\r\n\r\n    onAllFilterClick = ():void=> {this.props.changeFilter(\"All\")};\r\n    onCompletedFilterClick = ():void => { this.props.changeFilter(\"Completed\")};\r\n    onActiveFilterClick = ():void => { this.props.changeFilter(\"Active\")};\r\n    onShowFiltersClick = ():void => {this.setState ({isHidden: false})};\r\n    onHideFiltersClick = ():void => {this.setState ({isHidden: true})};\r\n\r\n\r\n    render = () => {\r\n        let ClassForALL = this.props.filterValue === \"All\" ? 'filter-active' : \"\";\r\n        let ClassForCompleted = this.props.filterValue === \"Completed\" ? 'filter-active' : \"\";\r\n        let ClassForActive = this.props.filterValue === \"Active\" ? 'filter-active' : \"\";\r\n\r\n        return (\r\n            <div className=\"\">\r\n                <div className=\"todoList-footer\">\r\n                    {!this.state.isHidden && <div>\r\n                    <button className={ClassForALL}\r\n                            onClick={this.onAllFilterClick}\r\n                    >All\r\n                    </button>\r\n\r\n                    <button className={ClassForCompleted}\r\n                            onClick={this.onCompletedFilterClick}\r\n                    >Completed\r\n                    </button>\r\n\r\n                    <button className={ClassForActive}\r\n                            onClick={this.onActiveFilterClick}\r\n                    >Active\r\n                    </button>\r\n                    </div>}\r\n                        {!this.state.isHidden && <span onClick={this.onHideFiltersClick}> hide </span>}\r\n                        {this.state.isHidden && <span onClick={this.onShowFiltersClick}> show </span>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListFooter;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoListHeader from \"./TodoListHeader\";\r\nimport TodoListTasks from \"./TodoListTasks\";\r\nimport TodoListFooter from \"./TodoListFooter\";\r\nimport {TaskType, TodoType, UpadateTaskType} from \"./types/entities\";\r\n\r\n\r\ntype StateType = {\r\n    filterValue: string\r\n}\r\n\r\ntype OwnPropsType = {\r\n    id: string\r\n    loadTasks: (id: string) => void\r\n    addTask: (id: string, taskTitle: string) => void\r\n    changeTask: (id: string, taskId: string, task: TaskType, newPropsObj: UpadateTaskType) => void\r\n    title: string\r\n    todolist: TodoType\r\n    tasks: Array<TaskType>\r\n}\r\n\r\n\r\nclass ToDoList extends React.Component<OwnPropsType, StateType> {\r\n\r\n    state: StateType = {\r\n        filterValue: \"All\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.loadTasks(this.props.id);\r\n    }\r\n\r\n    addTask = (taskTitle: string): void => {\r\n        this.props.addTask(this.props.id, taskTitle);\r\n    };\r\n\r\n    changeFilter = (newFilterValue: string): void => {\r\n        this.setState({\r\n            filterValue: newFilterValue\r\n        })\r\n    };\r\n\r\n    changeTask = (task: TaskType, taskId: string, newPropsObj: UpadateTaskType) => {\r\n        this.props.changeTask(this.props.id, taskId, task, newPropsObj);\r\n    };\r\n\r\n    changeStatus = (task: TaskType, taskId: string, isDone: boolean) => {\r\n\r\n        this.changeTask(task, taskId, {status: isDone ? 2 : 0})\r\n    };\r\n\r\n    changeTitle = (task: TaskType, taskId: string, newTitle: string) => {\r\n        this.changeTask(task, taskId, {title: newTitle})\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <div className=\"todoList\">\r\n                <TodoListHeader id={this.props.id} addTask={this.addTask} title={this.props.title}/>\r\n                {this.props.todolist.loading ? <span>...Loading</span> :\r\n                    <TodoListTasks\r\n                        changeStatus={this.changeStatus}\r\n                        changeTitle={this.changeTitle}\r\n                        todolistId={this.props.id}\r\n\r\n                        tasks={this.props.tasks.filter(t => {\r\n                            if (this.state.filterValue === \"All\") {\r\n                                return true;\r\n                            }\r\n                            if (this.state.filterValue === \"Completed\") {\r\n                                return t.status === 2;\r\n                            }\r\n                            if (this.state.filterValue === \"Active\") {\r\n                                return t.status !== 2;\r\n                            }\r\n                        })}/>}\r\n                <TodoListFooter\r\n                    filterValue={this.state.filterValue}\r\n                    changeFilter={this.changeFilter}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ToDoList;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport ToDoList from \"./ToDoList\";\r\nimport AddNewItemForm from \"./AddNewItemForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    addTask,\r\n    addTodolist,\r\n    changeTask,\r\n    loadTasks,\r\n    loadTodoLists\r\n} from \"./reducer\";\r\nimport {TaskType, TodoType, UpadateTaskType} from \"./types/entities\";\r\nimport {AppStateType} from \"./store\";\r\n\r\n\r\ntype OwnPropsType = {\r\n    todolists: Array<TodoType>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    loadTodoLists: () => void\r\n    addTodolist: (title: string) => void\r\n    addTask: (todolistId: string, title: string) => void\r\n    changeTask: (todolistId: string, taskId: string, task: TaskType, newPropsObj: UpadateTaskType) => void\r\n    loadTasks: (todolistId: string) => void\r\n\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    todolists: Array<TodoType>\r\n    loading: boolean\r\n}\r\n\r\ntype PropsType = OwnPropsType & MapDispatchPropsType & MapStatePropsType\r\n\r\nclass App extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.loadTodoLists()\r\n    }\r\n\r\n    addToDoList = (title: string): void => {\r\n        this.props.addTodolist(title);\r\n    };\r\n\r\n    render = () => {\r\n        let todolists = this.props.todolists.map(tl => <ToDoList\r\n            todolist={tl}\r\n            key={tl.id}\r\n            id={tl.id}\r\n            title={tl.title}\r\n            tasks={tl.tasks}\r\n            addTask={this.props.addTask}\r\n            changeTask={this.props.changeTask}\r\n            loadTasks={this.props.loadTasks}\r\n        />);\r\n        return (\r\n            <>\r\n                <div>\r\n                    <AddNewItemForm addItem={this.addToDoList}/>\r\n                </div>\r\n                <div className=\"App\">\r\n                    {this.props.loading\r\n                        ? <span>...Loading</span>\r\n                        : todolists}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        todolists: state.todolist.todolists,\r\n        loading: state.todolist.loading\r\n    }\r\n};\r\n\r\nconst ConnectedApp = connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {\r\n    addTask,\r\n    changeTask,\r\n    loadTodoLists,\r\n    loadTasks,\r\n    addTodolist\r\n})(App);\r\nexport default ConnectedApp;\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst rootReducer =  combineReducers({\r\n    todolist: reducer\r\n});\r\n\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType=ReturnType<RootReducerType>\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never;\r\nexport type InferActionTypes<T extends {[key: string]: (...args:any)=> any}> = ReturnType<PropertiesType<T>>\r\n\r\n\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport default store;\r\n\r\n// window.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter basename={process.env.PUBLIC_URL}>\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>\r\n    </HashRouter>, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}